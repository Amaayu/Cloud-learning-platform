module.exports=[44766,e=>{"use strict";var t=e.i(47909),n=e.i(74017),i=e.i(96250),a=e.i(59756),s=e.i(61916),r=e.i(14444),o=e.i(37092),c=e.i(69741),l=e.i(16795),d=e.i(87718),u=e.i(95169),p=e.i(47587),m=e.i(66012),g=e.i(70101),h=e.i(26937),f=e.i(10372),y=e.i(93695);e.i(52474);var b=e.i(220),w=e.i(89171),I=e.i(43793),v=e.i(26046);async function S(){try{await (0,I.default)(),await v.default.connection.db.collection("subjects").deleteMany({}),await v.default.connection.db.collection("units").deleteMany({}),await v.default.connection.db.collection("topics").deleteMany({}),await v.default.connection.db.collection("quizzes").deleteMany({});let e=await v.default.connection.db.collection("subjects").insertMany([{title:"Data Structures & Algorithms",description:"Master fundamental data structures and algorithmic thinking with comprehensive examples and practice problems.",image:"https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=400",category:"core",units:[]},{title:"Database Management System",description:"Learn database design, SQL queries, normalization, and database management concepts.",image:"https://images.unsplash.com/photo-1544383835-bda2bc66a55d?w=400",category:"core",units:[]},{title:"Operating Systems",description:"Understand OS concepts, processes, memory management, and system calls.",image:"https://images.unsplash.com/photo-1518432031352-d6fc5c10da5a?w=400",category:"core",units:[]},{title:"Computer Networks",description:"Explore networking protocols, OSI model, TCP/IP, and network security.",image:"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=400",category:"core",units:[]},{title:"Web Development",description:"Build modern web applications with HTML, CSS, JavaScript, and popular frameworks.",image:"https://images.unsplash.com/photo-1547658719-da2b51169166?w=400",category:"frontend",units:[]},{title:"AI & Machine Learning",description:"Introduction to artificial intelligence, machine learning algorithms, and neural networks.",image:"https://images.unsplash.com/photo-1555255707-c07966088b7b?w=400",category:"ai-ml",units:[]}]),t=Object.values(e.insertedIds),n=[{title:"Arrays and Strings",description:"Fundamental linear data structures for storing and manipulating data",subjectId:t[0],topics:[],order:1},{title:"Linked Lists",description:"Dynamic data structures with pointer-based connections",subjectId:t[0],topics:[],order:2},{title:"Stacks and Queues",description:"LIFO and FIFO data structures with specific access patterns",subjectId:t[0],topics:[],order:3},{title:"Trees and Binary Trees",description:"Hierarchical data structures for efficient searching and sorting",subjectId:t[0],topics:[],order:4},{title:"Graphs",description:"Network structures representing relationships between entities",subjectId:t[0],topics:[],order:5},{title:"Dynamic Programming",description:"Optimization technique for solving complex problems efficiently",subjectId:t[0],topics:[],order:6},{title:"Introduction to DBMS",description:"Database concepts, architecture, and data models",subjectId:t[1],topics:[],order:1},{title:"Entity-Relationship Model",description:"Conceptual database design using ER diagrams",subjectId:t[1],topics:[],order:2},{title:"Relational Model",description:"Mathematical foundation of relational databases",subjectId:t[1],topics:[],order:3},{title:"SQL Fundamentals",description:"Structured Query Language for database operations",subjectId:t[1],topics:[],order:4},{title:"Normalization",description:"Database design principles to eliminate redundancy",subjectId:t[1],topics:[],order:5},{title:"Transaction Management",description:"ACID properties and concurrency control",subjectId:t[1],topics:[],order:6},{title:"OS Introduction",description:"Operating system concepts and system architecture",subjectId:t[2],topics:[],order:1},{title:"Process Management",description:"Process creation, scheduling, and synchronization",subjectId:t[2],topics:[],order:2},{title:"Memory Management",description:"Virtual memory, paging, and memory allocation",subjectId:t[2],topics:[],order:3},{title:"File Systems",description:"File organization, directory structures, and storage",subjectId:t[2],topics:[],order:4},{title:"I/O Management",description:"Device drivers, interrupt handling, and I/O scheduling",subjectId:t[2],topics:[],order:5},{title:"Security and Protection",description:"Access control, authentication, and system security",subjectId:t[2],topics:[],order:6}],i=await v.default.connection.db.collection("units").insertMany(n),a=Object.values(i.insertedIds),s=[{title:"Network Fundamentals",description:"Basic networking concepts and network types",subjectId:t[3],topics:[],order:1},{title:"OSI and TCP/IP Models",description:"Network protocol stack and layer architecture",subjectId:t[3],topics:[],order:2},{title:"Data Link Layer",description:"Frame transmission, error detection, and MAC protocols",subjectId:t[3],topics:[],order:3},{title:"HTML & CSS Fundamentals",description:"Structure and styling of web pages",subjectId:t[4],topics:[],order:1},{title:"JavaScript Basics",description:"Client-side scripting and DOM manipulation",subjectId:t[4],topics:[],order:2},{title:"Frontend Frameworks",description:"React, Vue, and modern frontend development",subjectId:t[4],topics:[],order:3},{title:"AI Introduction",description:"Artificial intelligence concepts and applications",subjectId:t[5],topics:[],order:1},{title:"Machine Learning Basics",description:"Supervised, unsupervised, and reinforcement learning",subjectId:t[5],topics:[],order:2},{title:"Neural Networks",description:"Deep learning and artificial neural networks",subjectId:t[5],topics:[],order:3}],r=await v.default.connection.db.collection("units").insertMany(s),o=Object.values(r.insertedIds);[...a,...o],await v.default.connection.db.collection("subjects").updateOne({_id:t[0]},{$set:{units:[a[0],a[1],a[2],a[3],a[4],a[5]]}}),await v.default.connection.db.collection("subjects").updateOne({_id:t[1]},{$set:{units:[a[6],a[7],a[8],a[9],a[10],a[11]]}}),await v.default.connection.db.collection("subjects").updateOne({_id:t[2]},{$set:{units:[a[12],a[13],a[14],a[15],a[16],a[17]]}}),await v.default.connection.db.collection("subjects").updateOne({_id:t[3]},{$set:{units:[o[0],o[1],o[2]]}}),await v.default.connection.db.collection("subjects").updateOne({_id:t[4]},{$set:{units:[o[3],o[4],o[5]]}}),await v.default.connection.db.collection("subjects").updateOne({_id:t[5]},{$set:{units:[o[6],o[7],o[8]]}});let c=[{title:"Array Fundamentals",content:`<h1>Array Fundamentals</h1>
        <p>Arrays are fundamental data structures that store elements of the same type in contiguous memory locations.</p>
        <h2>Key Characteristics</h2>
        <ul>
          <li><strong>Contiguous Memory Layout</strong>: Elements are stored in consecutive memory addresses</li>
          <li><strong>Fixed Size</strong>: Size is determined at declaration time</li>
          <li><strong>Homogeneous Elements</strong>: All elements must be of the same data type</li>
          <li><strong>Zero-based Indexing</strong>: First element is at index 0</li>
        </ul>
        <h2>Time Complexity</h2>
        <ul>
          <li><strong>Access</strong>: O(1) - Direct access using index</li>
          <li><strong>Search</strong>: O(n) - Linear search through elements</li>
          <li><strong>Insertion</strong>: O(n) - May require shifting elements</li>
          <li><strong>Deletion</strong>: O(n) - May require shifting elements</li>
        </ul>`,examples:[{title:"Array Declaration and Initialization",description:"Different ways to declare and initialize arrays",code:`// JavaScript
let numbers = [1, 2, 3, 4, 5];
let fruits = new Array("apple", "banana", "orange");

// Java
int[] numbers = {1, 2, 3, 4, 5};
String[] fruits = new String[3];

// Python
numbers = [1, 2, 3, 4, 5]
fruits = ["apple", "banana", "orange"]`,language:"javascript"}],unitId:a[0],subjectId:t[0],order:1},{title:"Array Operations and Algorithms",content:`<h1>Array Operations and Algorithms</h1>
        <p>Learn essential array operations including traversal, searching, insertion, and deletion.</p>
        <h2>Common Operations</h2>
        <ul>
          <li><strong>Traversal</strong>: Visiting each element exactly once</li>
          <li><strong>Insertion</strong>: Adding elements at specific positions</li>
          <li><strong>Deletion</strong>: Removing elements from specific positions</li>
          <li><strong>Searching</strong>: Finding elements or their positions</li>
        </ul>`,examples:[{title:"Linear Search Implementation",description:"Basic search algorithm for arrays",code:`function linearSearch(arr, target) {
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === target) {
            return i; // Return index if found
        }
    }
    return -1; // Return -1 if not found
}

// Example usage
let numbers = [64, 34, 25, 12, 22, 11, 90];
console.log(linearSearch(numbers, 22)); // Output: 4`,language:"javascript"}],unitId:a[0],subjectId:t[0],order:2},{title:"Linked List Fundamentals",content:`<h1>Linked List Fundamentals</h1>
        <p>A linked list is a linear data structure where elements are stored in nodes, and each node contains data and a reference to the next node.</p>
        <h2>Advantages</h2>
        <ul>
          <li><strong>Dynamic Size</strong>: Can grow or shrink during runtime</li>
          <li><strong>Efficient Insertion/Deletion</strong>: O(1) at known positions</li>
          <li><strong>Memory Efficient</strong>: Allocates memory as needed</li>
        </ul>`,examples:[{title:"Singly Linked List Implementation",description:"Basic linked list structure and operations",code:`class ListNode {
    constructor(data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    constructor() {
        this.head = null;
        this.size = 0;
    }
    
    insertAtBeginning(data) {
        const newNode = new ListNode(data);
        newNode.next = this.head;
        this.head = newNode;
        this.size++;
    }
}`,language:"javascript"}],unitId:a[1],subjectId:t[0],order:1},{title:"Database Concepts and Architecture",content:`<h1>Database Concepts and Architecture</h1>
        <p>A database is an organized collection of structured information, or data, typically stored electronically in a computer system.</p>
        <h2>Key Database Concepts</h2>
        <ul>
          <li><strong>Data</strong>: Raw facts and figures</li>
          <li><strong>Database</strong>: Collection of related data</li>
          <li><strong>DBMS</strong>: Software system that enables users to define, create, maintain, and control access to databases</li>
        </ul>
        <h2>Three-Level Architecture</h2>
        <ul>
          <li><strong>External Level</strong>: User view of the database</li>
          <li><strong>Conceptual Level</strong>: Community view of the database</li>
          <li><strong>Internal Level</strong>: Physical storage of data</li>
        </ul>`,examples:[{title:"Basic SQL Query",description:"Simple SELECT statement",code:`-- Select all columns from users table
SELECT * FROM users;

-- Select specific columns with condition
SELECT name, email FROM users WHERE age > 18;

-- Select with ordering
SELECT * FROM users ORDER BY name ASC;`,language:"sql"}],unitId:a[6],subjectId:t[1],order:1},{title:"Operating System Fundamentals",content:`<h1>Operating System Fundamentals</h1>
        <p>An Operating System (OS) is system software that manages computer hardware and software resources and provides common services for computer programs.</p>
        <h2>Functions of Operating System</h2>
        <ul>
          <li><strong>Process Management</strong>: Process creation, scheduling, and synchronization</li>
          <li><strong>Memory Management</strong>: Memory allocation and virtual memory</li>
          <li><strong>File System Management</strong>: File operations and storage</li>
          <li><strong>I/O System Management</strong>: Device driver management</li>
        </ul>`,examples:[{title:"System Call Example",description:"Basic system calls in C",code:`#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();
    
    if (pid == 0) {
        // Child process
        printf("Child process: PID = %d\\n", getpid());
        exit(0);
    } else if (pid > 0) {
        // Parent process
        printf("Parent process: PID = %d\\n", getpid());
        wait(NULL);
    }
    
    return 0;
}`,language:"c"}],unitId:a[12],subjectId:t[2],order:1}],l=await v.default.connection.db.collection("topics").insertMany(c),d=Object.values(l.insertedIds);await v.default.connection.db.collection("units").updateOne({_id:a[0]},{$set:{topics:[d[0],d[1]]}}),await v.default.connection.db.collection("units").updateOne({_id:a[1]},{$set:{topics:[d[2]]}}),await v.default.connection.db.collection("units").updateOne({_id:a[6]},{$set:{topics:[d[3]]}}),await v.default.connection.db.collection("units").updateOne({_id:a[12]},{$set:{topics:[d[4]]}});let u=[{title:"Arrays and Strings Quiz",unitId:a[0],subjectId:t[0],questions:[{question:"What is the time complexity of accessing an element in an array by index?",options:["O(1)","O(n)","O(log n)","O(n²)"],correctAnswer:0,explanation:"Array elements can be accessed directly using their index, which takes constant time O(1)."},{question:"Which of the following is NOT a characteristic of arrays?",options:["Elements are stored in contiguous memory locations","All elements must be of the same data type","Dynamic size that can change during runtime","Zero-based indexing in most programming languages"],correctAnswer:2,explanation:"Arrays typically have a fixed size that is determined at creation time."},{question:"What is the worst-case time complexity for searching an element in an unsorted array?",options:["O(1)","O(log n)","O(n)","O(n log n)"],correctAnswer:2,explanation:"In the worst case, we might need to check every element in the array, resulting in O(n) time complexity."}],timeLimit:20},{title:"Linked Lists Quiz",unitId:a[1],subjectId:t[0],questions:[{question:"What is the main advantage of linked lists over arrays?",options:["Faster access time","Dynamic size","Better cache performance","Less memory usage"],correctAnswer:1,explanation:"Linked lists can grow or shrink during runtime, unlike arrays which have fixed size."},{question:"What is the time complexity of inserting an element at the beginning of a linked list?",options:["O(1)","O(n)","O(log n)","O(n²)"],correctAnswer:0,explanation:"Inserting at the beginning only requires updating the head pointer, which is O(1)."}],timeLimit:15},{title:"Database Fundamentals Quiz",unitId:a[6],subjectId:t[1],questions:[{question:"What does DBMS stand for?",options:["Database Management System","Data Base Management Software","Database Manipulation System","Data Management System"],correctAnswer:0,explanation:"DBMS stands for Database Management System."},{question:"Which level of database architecture describes how data is physically stored?",options:["External Level","Conceptual Level","Internal Level","Logical Level"],correctAnswer:2,explanation:"The Internal Level describes the physical storage of data."}],timeLimit:15}];await v.default.connection.db.collection("quizzes").insertMany(u);let p={subjects:await v.default.connection.db.collection("subjects").countDocuments(),units:await v.default.connection.db.collection("units").countDocuments(),topics:await v.default.connection.db.collection("topics").countDocuments(),quizzes:await v.default.connection.db.collection("quizzes").countDocuments()};return w.NextResponse.json({message:"Database seeded successfully!",counts:p,subjectIds:t.map(e=>e.toString()),unitIds:a.map(e=>e.toString())})}catch(e){return console.error("Seeding error:",e),w.NextResponse.json({message:"Seeding failed",error:e.message},{status:500})}}e.s(["POST",()=>S],67299);var O=e.i(67299);let R=new t.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/seed/route",pathname:"/api/seed",filename:"route",bundlePath:""},distDir:".next",relativeProjectDir:"",resolvedPagePath:"[project]/src/app/api/seed/route.ts",nextConfigOutput:"",userland:O}),{workAsyncStorage:x,workUnitAsyncStorage:A,serverHooks:C}=R;function E(){return(0,i.patchFetch)({workAsyncStorage:x,workUnitAsyncStorage:A})}async function M(e,t,i){R.isDev&&(0,a.addRequestMeta)(e,"devRequestTimingInternalsEnd",process.hrtime.bigint());let w="/api/seed/route";w=w.replace(/\/index$/,"")||"/";let I=await R.prepare(e,t,{srcPage:w,multiZoneDraftMode:!1});if(!I)return t.statusCode=400,t.end("Bad Request"),null==i.waitUntil||i.waitUntil.call(i,Promise.resolve()),null;let{buildId:v,params:S,nextConfig:O,parsedUrl:x,isDraftMode:A,prerenderManifest:C,routerServerContext:E,isOnDemandRevalidate:M,revalidateOnlyGenerated:j,resolvedPathname:D,clientReferenceManifest:L,serverActionsManifest:k}=I,T=(0,c.normalizeAppPath)(w),P=!!(C.dynamicRoutes[T]||C.routes[D]),N=async()=>((null==E?void 0:E.render404)?await E.render404(e,t,x,!1):t.end("This page could not be found"),null);if(P&&!A){let e=!!C.routes[D],t=C.dynamicRoutes[T];if(t&&!1===t.fallback&&!e){if(O.experimental.adapterPath)return await N();throw new y.NoFallbackError}}let F=null;!P||R.isDev||A||(F="/index"===(F=D)?"/":F);let q=!0===R.isDev||!P,_=P&&!q;k&&L&&(0,r.setReferenceManifestsSingleton)({page:w,clientReferenceManifest:L,serverActionsManifest:k,serverModuleMap:(0,o.createServerModuleMap)({serverActionsManifest:k})});let z=e.method||"GET",B=(0,s.getTracer)(),H=B.getActiveScopeSpan(),U={params:S,prerenderManifest:C,renderOpts:{experimental:{authInterrupts:!!O.experimental.authInterrupts},cacheComponents:!!O.cacheComponents,supportsDynamicResponse:q,incrementalCache:(0,a.getRequestMeta)(e,"incrementalCache"),cacheLifeProfiles:O.cacheLife,waitUntil:i.waitUntil,onClose:e=>{t.on("close",e)},onAfterTaskError:void 0,onInstrumentationRequestError:(t,n,i)=>R.onRequestError(e,t,i,E)},sharedContext:{buildId:v}},$=new l.NodeNextRequest(e),W=new l.NodeNextResponse(t),K=d.NextRequestAdapter.fromNodeNextRequest($,(0,d.signalFromNodeResponse)(t));try{let r=async e=>R.handle(K,U).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":t.statusCode,"next.rsc":!1});let n=B.getRootSpanAttributes();if(!n)return;if(n.get("next.span_type")!==u.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${n.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let i=n.get("next.route");if(i){let t=`${z} ${i}`;e.setAttributes({"next.route":i,"http.route":i,"next.span_name":t}),e.updateName(t)}else e.updateName(`${z} ${w}`)}),o=!!(0,a.getRequestMeta)(e,"minimalMode"),c=async a=>{var s,c;let l=async({previousCacheEntry:n})=>{try{if(!o&&M&&j&&!n)return t.statusCode=404,t.setHeader("x-nextjs-cache","REVALIDATED"),t.end("This page could not be found"),null;let s=await r(a);e.fetchMetrics=U.renderOpts.fetchMetrics;let c=U.renderOpts.pendingWaitUntil;c&&i.waitUntil&&(i.waitUntil(c),c=void 0);let l=U.renderOpts.collectedTags;if(!P)return await (0,m.sendResponse)($,W,s,U.renderOpts.pendingWaitUntil),null;{let e=await s.blob(),t=(0,g.toNodeOutgoingHttpHeaders)(s.headers);l&&(t[f.NEXT_CACHE_TAGS_HEADER]=l),!t["content-type"]&&e.type&&(t["content-type"]=e.type);let n=void 0!==U.renderOpts.collectedRevalidate&&!(U.renderOpts.collectedRevalidate>=f.INFINITE_CACHE)&&U.renderOpts.collectedRevalidate,i=void 0===U.renderOpts.collectedExpire||U.renderOpts.collectedExpire>=f.INFINITE_CACHE?void 0:U.renderOpts.collectedExpire;return{value:{kind:b.CachedRouteKind.APP_ROUTE,status:s.status,body:Buffer.from(await e.arrayBuffer()),headers:t},cacheControl:{revalidate:n,expire:i}}}}catch(t){throw(null==n?void 0:n.isStale)&&await R.onRequestError(e,t,{routerKind:"App Router",routePath:w,routeType:"route",revalidateReason:(0,p.getRevalidateReason)({isStaticGeneration:_,isOnDemandRevalidate:M})},E),t}},d=await R.handleResponse({req:e,nextConfig:O,cacheKey:F,routeKind:n.RouteKind.APP_ROUTE,isFallback:!1,prerenderManifest:C,isRoutePPREnabled:!1,isOnDemandRevalidate:M,revalidateOnlyGenerated:j,responseGenerator:l,waitUntil:i.waitUntil,isMinimalMode:o});if(!P)return null;if((null==d||null==(s=d.value)?void 0:s.kind)!==b.CachedRouteKind.APP_ROUTE)throw Object.defineProperty(Error(`Invariant: app-route received invalid cache entry ${null==d||null==(c=d.value)?void 0:c.kind}`),"__NEXT_ERROR_CODE",{value:"E701",enumerable:!1,configurable:!0});o||t.setHeader("x-nextjs-cache",M?"REVALIDATED":d.isMiss?"MISS":d.isStale?"STALE":"HIT"),A&&t.setHeader("Cache-Control","private, no-cache, no-store, max-age=0, must-revalidate");let u=(0,g.fromNodeOutgoingHttpHeaders)(d.value.headers);return o&&P||u.delete(f.NEXT_CACHE_TAGS_HEADER),!d.cacheControl||t.getHeader("Cache-Control")||u.get("Cache-Control")||u.set("Cache-Control",(0,h.getCacheControlHeader)(d.cacheControl)),await (0,m.sendResponse)($,W,new Response(d.value.body,{headers:u,status:d.value.status||200})),null};H?await c(H):await B.withPropagatedContext(e.headers,()=>B.trace(u.BaseServerSpan.handleRequest,{spanName:`${z} ${w}`,kind:s.SpanKind.SERVER,attributes:{"http.method":z,"http.target":e.url}},c))}catch(t){if(t instanceof y.NoFallbackError||await R.onRequestError(e,t,{routerKind:"App Router",routePath:T,routeType:"route",revalidateReason:(0,p.getRevalidateReason)({isStaticGeneration:_,isOnDemandRevalidate:M})}),P)throw t;return await (0,m.sendResponse)($,W,new Response(null,{status:500})),null}}e.s(["handler",()=>M,"patchFetch",()=>E,"routeModule",()=>R,"serverHooks",()=>C,"workAsyncStorage",()=>x,"workUnitAsyncStorage",()=>A],44766)}];

//# sourceMappingURL=node_modules_next_dist_esm_build_templates_app-route_f34af4ed.js.map