{"version":3,"sources":["turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js","turbopack:///[project]/src/app/api/seed/route.ts"],"sourcesContent":["import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { addRequestMeta, getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { setReferenceManifestsSingleton } from \"next/dist/esm/server/app-render/encryption-utils\";\nimport { createServerModuleMap } from \"next/dist/esm/server/app-render/action-utils\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/seed/route\",\n        pathname: \"/api/seed\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/src/app/api/seed/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    if (routeModule.isDev) {\n        addRequestMeta(req, 'devRequestTimingInternalsEnd', process.hrtime.bigint());\n    }\n    let srcPage = \"/api/seed/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, parsedUrl, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname, clientReferenceManifest, serverActionsManifest } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    const render404 = async ()=>{\n        // TODO: should route-module itself handle rendering the 404\n        if (routerServerContext == null ? void 0 : routerServerContext.render404) {\n            await routerServerContext.render404(req, res, parsedUrl, false);\n        } else {\n            res.end('This page could not be found');\n        }\n        return null;\n    };\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                if (nextConfig.experimental.adapterPath) {\n                    return await render404();\n                }\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isStaticGeneration = isIsr && !supportsDynamicResponse;\n    // Before rendering (which initializes component tree modules), we have to\n    // set the reference manifests to our global store so Server Action's\n    // encryption util can access to them at the top level of the page module.\n    if (serverActionsManifest && clientReferenceManifest) {\n        setReferenceManifestsSingleton({\n            page: srcPage,\n            clientReferenceManifest,\n            serverActionsManifest,\n            serverModuleMap: createServerModuleMap({\n                serverActionsManifest\n            })\n        });\n    }\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            cacheComponents: Boolean(nextConfig.cacheComponents),\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: nextConfig.cacheLife,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${srcPage}`);\n                }\n            });\n        };\n        const isMinimalMode = Boolean(process.env.MINIMAL_MODE || getRequestMeta(req, 'minimalMode'));\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!isMinimalMode && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isStaticGeneration,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil,\n                isMinimalMode\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!isMinimalMode) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(isMinimalMode && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, // @ts-expect-error - Argument of type 'Buffer<ArrayBufferLike>' is not assignable to parameter of type 'BodyInit | null | undefined'.\n            new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${srcPage}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isStaticGeneration,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","import { NextResponse } from 'next/server'\nimport dbConnect from '@/lib/db'\nimport mongoose from 'mongoose'\n\ninterface SubjectData {\n  _id: mongoose.Types.ObjectId\n  title: string\n  description: string\n  image: string\n  category: string\n}\n\ninterface UnitData {\n  _id: mongoose.Types.ObjectId\n  title: string\n  description: string\n  subjectId: mongoose.Types.ObjectId\n  order: number\n}\n\nexport async function POST() {\n  try {\n    await dbConnect()\n\n    // Clear existing data\n    await mongoose.connection.db.collection('subjects').deleteMany({})\n    await mongoose.connection.db.collection('units').deleteMany({})\n    await mongoose.connection.db.collection('topics').deleteMany({})\n    await mongoose.connection.db.collection('quizzes').deleteMany({})\n\n    // Create subjects\n    const subjects = [\n      {\n        title: 'Data Structures & Algorithms',\n        description: 'Master fundamental data structures and algorithmic thinking with comprehensive examples and practice problems.',\n        image: 'https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=400',\n        category: 'core',\n      },\n      {\n        title: 'Database Management System',\n        description: 'Learn database design, SQL queries, normalization, and database management concepts.',\n        image: 'https://images.unsplash.com/photo-1544383835-bda2bc66a55d?w=400',\n        category: 'core',\n      },\n      {\n        title: 'Operating Systems',\n        description: 'Understand OS concepts, processes, memory management, and system calls.',\n        image: 'https://images.unsplash.com/photo-1518432031352-d6fc5c10da5a?w=400',\n        category: 'core',\n      },\n    ]\n\n    const createdSubjects: SubjectData[] = []\n    for (const subjectData of subjects) {\n      const result = await mongoose.connection.db.collection('subjects').insertOne({\n        ...subjectData,\n        units: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      createdSubjects.push({ ...subjectData, _id: result.insertedId as mongoose.Types.ObjectId })\n    }\n\n    // Create units\n    const units = [\n      {\n        title: 'Arrays and Strings',\n        description: 'Fundamental linear data structures for storing and manipulating data',\n        subjectId: createdSubjects[0]._id,\n        order: 1,\n      },\n      {\n        title: 'Linked Lists',\n        description: 'Dynamic data structures with pointer-based connections',\n        subjectId: createdSubjects[0]._id,\n        order: 2,\n      },\n      {\n        title: 'Introduction to DBMS',\n        description: 'Database concepts, architecture, and data models',\n        subjectId: createdSubjects[1]._id,\n        order: 1,\n      },\n      {\n        title: 'OS Introduction',\n        description: 'Operating system concepts and system architecture',\n        subjectId: createdSubjects[2]._id,\n        order: 1,\n      },\n    ]\n\n    const createdUnits: UnitData[] = []\n    for (const unitData of units) {\n      const result = await mongoose.connection.db.collection('units').insertOne({\n        ...unitData,\n        topics: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      createdUnits.push({ ...unitData, _id: result.insertedId as mongoose.Types.ObjectId })\n\n      // Update subject with unit reference\n      await mongoose.connection.db.collection('subjects').updateOne(\n        { _id: unitData.subjectId },\n        { $push: { units: result.insertedId } } as any\n      )\n    }\n\n    // Create topics\n    const topics = [\n      {\n        title: 'Array Fundamentals',\n        content: `# Array Fundamentals\n\n## What is an Array?\n\nAn array is a fundamental data structure that stores elements of the same type in contiguous memory locations. Arrays provide efficient random access to elements using indices and are the building blocks for more complex data structures.\n\n## Key Characteristics\n\n### 1. **Contiguous Memory Layout**\n- Elements are stored in consecutive memory addresses\n- Enables efficient cache utilization\n- Allows for pointer arithmetic\n\n### 2. **Fixed Size**\n- Size is determined at declaration time\n- Cannot be changed during runtime (in static arrays)\n- Memory is allocated in a single block\n\n### 3. **Homogeneous Elements**\n- All elements must be of the same data type\n- Ensures consistent memory usage per element\n- Enables type safety\n\n### 4. **Zero-based Indexing**\n- First element is at index 0\n- Last element is at index (size - 1)\n- Standard in most programming languages\n\n## Time Complexity Analysis\n\n| Operation | Time Complexity | Description |\n|-----------|----------------|-------------|\n| Access | O(1) | Direct access using index |\n| Search | O(n) | Linear search through elements |\n| Insertion | O(n) | May require shifting elements |\n| Deletion | O(n) | May require shifting elements |\n\n## Advantages\n\n1. **Fast Access**: O(1) random access to any element\n2. **Memory Efficient**: No extra memory overhead\n3. **Cache Friendly**: Contiguous memory improves cache performance\n4. **Simple Implementation**: Easy to understand and implement\n\n## Disadvantages\n\n1. **Fixed Size**: Cannot resize dynamically\n2. **Insertion/Deletion Cost**: O(n) for maintaining order\n3. **Memory Waste**: May allocate more memory than needed\n4. **Type Restriction**: Can only store homogeneous data`,\n        unitId: createdUnits[0]._id,\n        subjectId: createdUnits[0].subjectId,\n        order: 1,\n        examples: [\n          {\n            title: 'Array Declaration and Initialization',\n            description: 'Different ways to create and initialize arrays in various programming languages',\n            code: `// JavaScript - Dynamic Arrays\nlet numbers = [1, 2, 3, 4, 5];\nlet fruits = new Array(\"apple\", \"banana\", \"orange\");\nlet empty = new Array(5); // Creates array with 5 undefined elements\n\n// Java - Static Arrays\nint[] numbers = {1, 2, 3, 4, 5};\nString[] fruits = new String[3];\nfruits[0] = \"apple\";\nfruits[1] = \"banana\";\nfruits[2] = \"orange\";\n\n// Python - Lists (Dynamic Arrays)\nnumbers = [1, 2, 3, 4, 5]\nfruits = [\"apple\", \"banana\", \"orange\"]\nmixed = [1, \"hello\", 3.14, True]  # Python allows mixed types`,\n            language: 'javascript'\n          },\n          {\n            title: 'Array Access and Modification',\n            description: 'How to access and modify array elements using indices',\n            code: `// Accessing elements\nlet arr = [10, 20, 30, 40, 50];\n\nconsole.log(arr[0]);    // Output: 10 (first element)\nconsole.log(arr[2]);    // Output: 30 (third element)\nconsole.log(arr[4]);    // Output: 50 (last element)\n\n// Modifying elements\narr[1] = 25;           // Change second element\narr[arr.length - 1] = 55; // Change last element\n\nconsole.log(arr);      // Output: [10, 25, 30, 40, 55]\n\n// Safe access with bounds checking\nfunction safeAccess(array, index) {\n    if (index >= 0 && index < array.length) {\n        return array[index];\n    }\n    return null; // or throw an error\n}\n\nconsole.log(safeAccess(arr, 2));  // Output: 30\nconsole.log(safeAccess(arr, 10)); // Output: null`,\n            language: 'javascript'\n          }\n        ]\n      },\n      {\n        title: 'Array Operations and Algorithms',\n        content: `# Array Operations and Algorithms\n\n## Basic Array Operations\n\n### 1. Traversal\nVisiting each element of the array exactly once. This is the foundation for most array algorithms.\n\n### 2. Insertion\nAdding elements to the array at specific positions. May require shifting existing elements.\n\n### 3. Deletion\nRemoving elements from specific positions. May require shifting remaining elements.\n\n### 4. Searching\nFinding elements or their positions within the array.\n\n### 5. Sorting\nArranging elements in a specific order (ascending or descending).\n\n## Common Array Algorithms\n\n### Linear Search\n- **Time Complexity**: O(n)\n- **Space Complexity**: O(1)\n- **Use Case**: Unsorted arrays, small datasets\n\n### Binary Search\n- **Time Complexity**: O(log n)\n- **Space Complexity**: O(1)\n- **Prerequisite**: Array must be sorted\n- **Use Case**: Large sorted datasets\n\n## Array Manipulation Patterns\n\n1. **Prefix Sum**: Precompute cumulative sums for range queries\n2. **Kadane's Algorithm**: Maximum subarray sum\n3. **Dutch National Flag**: Three-way partitioning\n4. **Merge Technique**: Combining sorted arrays`,\n        unitId: createdUnits[0]._id,\n        subjectId: createdUnits[0].subjectId,\n        order: 2,\n        examples: [\n          {\n            title: 'Linear Search Implementation',\n            description: 'Basic search algorithm for arrays',\n            code: `// Linear Search - O(n) time complexity\nfunction linearSearch(arr, target) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === target) {\n            return i; // Return index if found\n        }\n    }\n    return -1; // Return -1 if not found\n}\n\n// Example usage\nlet numbers = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(linearSearch(numbers, 22)); // Output: 4\nconsole.log(linearSearch(numbers, 99)); // Output: -1`,\n            language: 'javascript'\n          },\n          {\n            title: 'Binary Search Implementation',\n            description: 'Efficient search algorithm for sorted arrays',\n            code: `// Binary Search - O(log n) time complexity\nfunction binarySearch(arr, target) {\n    let left = 0;\n    let right = arr.length - 1;\n    \n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        \n        if (arr[mid] === target) {\n            return mid; // Found target\n        } else if (arr[mid] < target) {\n            left = mid + 1; // Search right half\n        } else {\n            right = mid - 1; // Search left half\n        }\n    }\n    \n    return -1; // Target not found\n}\n\n// Example usage\nlet sortedNumbers = [11, 12, 22, 25, 34, 64, 90];\nconsole.log(binarySearch(sortedNumbers, 22)); // Output: 2\nconsole.log(binarySearch(sortedNumbers, 99)); // Output: -1`,\n            language: 'javascript'\n          }\n        ]\n      },\n      {\n        title: 'String Fundamentals',\n        content: `# String Fundamentals\n\n## What is a String?\n\nA string is a sequence of characters that represents textual data. In most programming languages, strings are implemented as arrays of characters, making them a special case of array data structures.\n\n## String Characteristics\n\n### 1. **Character Sequence**\n- Ordered collection of characters\n- Each character has a specific position (index)\n- Can contain letters, digits, symbols, and whitespace\n\n### 2. **Immutability (Language Dependent)**\n- **Immutable**: Java, Python, JavaScript (primitive strings)\n- **Mutable**: C++, C# (StringBuilder), Python (bytearray)\n\n### 3. **Encoding**\n- ASCII: 7-bit encoding (128 characters)\n- UTF-8: Variable-length encoding (supports Unicode)\n- UTF-16: 16-bit encoding (used by Java, JavaScript)\n\n## String Operations\n\n### Basic Operations\n1. **Length**: Get number of characters\n2. **Access**: Get character at specific index\n3. **Concatenation**: Join two or more strings\n4. **Substring**: Extract part of a string\n5. **Search**: Find character or substring\n6. **Comparison**: Compare strings lexicographically\n\n## String Algorithms\n\n### 1. **Pattern Matching**\n- **Naive Algorithm**: O(nm) time complexity\n- **KMP Algorithm**: O(n+m) time complexity\n- **Rabin-Karp**: O(n+m) average case\n\n### 2. **String Manipulation**\n- **Palindrome Check**: O(n) time\n- **Anagram Detection**: O(n log n) or O(n)\n- **Longest Common Subsequence**: O(nm)`,\n        unitId: createdUnits[0]._id,\n        subjectId: createdUnits[0].subjectId,\n        order: 3,\n        examples: [\n          {\n            title: 'String Creation and Basic Operations',\n            description: 'Different ways to create strings and perform basic operations',\n            code: `// String Creation\nlet str1 = \"Hello World\";           // String literal\nlet str2 = new String(\"Hello\");     // String object\nlet str3 = \\`Template \\${str1}\\`;      // Template literal (ES6)\n\n// Basic Properties\nconsole.log(\"Length:\", str1.length);        // Output: 11\nconsole.log(\"Character at index 0:\", str1[0]); // Output: H\nconsole.log(\"Character at index 6:\", str1.charAt(6)); // Output: W\n\n// String Concatenation\nlet firstName = \"John\";\nlet lastName = \"Doe\";\nlet fullName1 = firstName + \" \" + lastName;     // Using + operator\nlet fullName2 = firstName.concat(\" \", lastName); // Using concat method\nlet fullName3 = \\`\\${firstName} \\${lastName}\\`;    // Using template literals\n\nconsole.log(\"Full names:\", fullName1, fullName2, fullName3);`,\n            language: 'javascript'\n          }\n        ]\n      },\n      {\n        title: 'Linked List Fundamentals',\n        content: `# Linked List Fundamentals\n\n## What is a Linked List?\n\nA linked list is a linear data structure where elements (nodes) are stored in sequence, but unlike arrays, the elements are not stored in contiguous memory locations. Instead, each node contains data and a reference (or link) to the next node in the sequence.\n\n## Node Structure\n\nEach node in a linked list typically contains:\n1. **Data**: The actual value stored in the node\n2. **Next**: A reference/pointer to the next node\n\n## Types of Linked Lists\n\n### 1. **Singly Linked List**\n- Each node points to the next node\n- Last node points to null\n- Traversal only in forward direction\n\n### 2. **Doubly Linked List**\n- Each node has pointers to both next and previous nodes\n- Allows bidirectional traversal\n- Requires more memory per node\n\n### 3. **Circular Linked List**\n- Last node points back to the first node\n- Forms a circular chain\n- No null pointers (except for empty list)\n\n## Advantages of Linked Lists\n\n1. **Dynamic Size**: Can grow or shrink during runtime\n2. **Efficient Insertion/Deletion**: O(1) at known positions\n3. **Memory Efficient**: Allocates memory as needed\n4. **Flexible**: Easy to implement stacks, queues, and other structures\n\n## Time Complexity Analysis\n\n| Operation | Time Complexity | Description |\n|-----------|----------------|-------------|\n| Access | O(n) | Must traverse from head |\n| Search | O(n) | Linear search required |\n| Insertion | O(1) | At known position |\n| Deletion | O(1) | At known position |`,\n        unitId: createdUnits[1]._id,\n        subjectId: createdUnits[1].subjectId,\n        order: 1,\n        examples: [\n          {\n            title: 'Singly Linked List Implementation',\n            description: 'Complete implementation of a singly linked list with basic operations',\n            code: `// Node class definition\nclass ListNode {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\n// Singly Linked List class\nclass SinglyLinkedList {\n    constructor() {\n        this.head = null;\n        this.size = 0;\n    }\n    \n    // Insert at the beginning - O(1)\n    insertAtBeginning(data) {\n        const newNode = new ListNode(data);\n        newNode.next = this.head;\n        this.head = newNode;\n        this.size++;\n    }\n    \n    // Insert at the end - O(n)\n    insertAtEnd(data) {\n        const newNode = new ListNode(data);\n        \n        if (!this.head) {\n            this.head = newNode;\n        } else {\n            let current = this.head;\n            while (current.next) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n        this.size++;\n    }\n    \n    // Display the list\n    display() {\n        if (!this.head) {\n            console.log(\"List is empty\");\n            return;\n        }\n        \n        let result = [];\n        let current = this.head;\n        \n        while (current) {\n            result.push(current.data);\n            current = current.next;\n        }\n        \n        console.log(result.join(\" -> \") + \" -> null\");\n    }\n}\n\n// Example usage\nconst list = new SinglyLinkedList();\nlist.insertAtBeginning(10);\nlist.insertAtBeginning(20);\nlist.insertAtEnd(30);\nlist.display(); // Output: 20 -> 10 -> 30 -> null`,\n            language: 'javascript'\n          }\n        ]\n      }\n    ]\n\n    const createdTopics: any[] = []\n    for (const topicData of topics) {\n      const result = await mongoose.connection.db.collection('topics').insertOne({\n        ...topicData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      createdTopics.push({ ...topicData, _id: result.insertedId })\n\n      // Update unit with topic reference\n      await mongoose.connection.db.collection('units').updateOne(\n        { _id: topicData.unitId },\n        { $push: { topics: result.insertedId } } as any\n      )\n    }\n\n    // Create a sample quiz\n    const quiz = {\n      title: 'Arrays and Strings Quiz',\n      unitId: createdUnits[0]._id,\n      subjectId: createdUnits[0].subjectId,\n      timeLimit: 20,\n      questions: [\n        {\n          question: 'What is the time complexity of accessing an element in an array by index?',\n          options: ['O(1)', 'O(n)', 'O(log n)', 'O(n²)'],\n          correctAnswer: 0,\n          explanation: 'Array elements can be accessed directly using their index, which takes constant time O(1).'\n        },\n        {\n          question: 'Which of the following is NOT a characteristic of arrays?',\n          options: [\n            'Elements are stored in contiguous memory locations',\n            'All elements must be of the same data type',\n            'Dynamic size that can change during runtime',\n            'Zero-based indexing in most programming languages'\n          ],\n          correctAnswer: 2,\n          explanation: 'Arrays typically have a fixed size that is determined at creation time. Dynamic arrays or lists can change size, but traditional arrays cannot.'\n        }\n      ],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n\n    await mongoose.connection.db.collection('quizzes').insertOne(quiz)\n\n    return NextResponse.json({\n      message: 'Database seeded successfully!',\n      summary: {\n        subjects: createdSubjects.length,\n        units: createdUnits.length,\n        topics: createdTopics.length,\n        quizzes: 1\n      }\n    })\n\n  } catch (error) {\n    console.error('Error seeding database:', error)\n    return NextResponse.json(\n      { message: 'Error seeding database', error: error.message },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":"uCAAA,IAAA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,CAAA,CAAA,OAAA,IAAA,EAAA,EAAA,CAAA,CAAA,KCjBA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OAkBO,eAAe,IACpB,GAAI,CACF,MAAM,CAAA,EAAA,EAAA,OAAS,AAAT,IAGN,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,UAAU,CAAC,CAAC,GAChE,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,UAAU,CAAC,CAAC,GAC7D,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,UAAU,CAAC,CAAC,GAC9D,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,UAAU,CAAC,CAAC,GAwB/D,IAAM,EAAiC,EAAE,CACzC,IAAK,IAAM,IAtBM,CACf,CACE,MAAO,GAoBe,4BAnBtB,YAAa,iHACb,MAAO,kEACP,SAAU,MACZ,EACA,CACE,MAAO,6BACP,YAAa,uFACb,MAAO,kEACP,SAAU,MACZ,EACA,CACE,MAAO,oBACP,YAAa,0EACb,MAAO,qEACP,SAAU,MACZ,EACD,CAGmC,CAClC,IAAM,EAAS,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,SAAS,CAAC,CAC3E,GAAG,CAAW,CACd,MAAO,EAAE,CACT,UAAW,IAAI,KACf,UAAW,IAAI,IACjB,GACA,EAAgB,IAAI,CAAC,CAAE,GAAG,CAAW,CAAE,IAAK,EAAO,UAAU,AAA4B,EAC3F,CAGA,IAAM,EAAQ,CACZ,CACE,MAAO,qBACP,YAAa,uEACb,UAAW,CAAe,CAAC,EAAE,CAAC,GAAG,CACjC,MAAO,CACT,EACA,CACE,MAAO,eACP,YAAa,yDACb,UAAW,CAAe,CAAC,EAAE,CAAC,GAAG,CACjC,MAAO,CACT,EACA,CACE,MAAO,uBACP,YAAa,mDACb,UAAW,CAAe,CAAC,EAAE,CAAC,GAAG,CACjC,MAAO,CACT,EACA,CACE,MAAO,kBACP,YAAa,oDACb,UAAW,CAAe,CAAC,EAAE,CAAC,GAAG,CACjC,MAAO,CACT,EACD,CAEK,EAA2B,EAAE,CACnC,IAAK,IAAM,KAAY,EAAO,CAC5B,IAAM,EAAS,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CAAC,CACxE,GAAG,CAAQ,CACX,OAAQ,EAAE,CACV,UAAW,IAAI,KACf,UAAW,IAAI,IACjB,GACA,EAAa,IAAI,CAAC,CAAE,GAAG,CAAQ,CAAE,IAAK,EAAO,UAAU,AAA4B,GAGnF,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,SAAS,CAC3D,CAAE,IAAK,EAAS,SAAS,AAAC,EAC1B,CAAE,MAAO,CAAE,MAAO,EAAO,UAAU,AAAC,CAAE,EAE1C,CAGA,IAAM,EAAS,CACb,CACE,MAAO,qBACP,QAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDAiDsC,CAAC,CACjD,OAAQ,CAAY,CAAC,EAAE,CAAC,GAAG,CAC3B,UAAW,CAAY,CAAC,EAAE,CAAC,SAAS,CACpC,MAAO,EACP,SAAU,CACR,CACE,MAAO,uCACP,YAAa,kFACb,KAAM,CAAC;;;;;;;;;;;;;;;6DAe0C,CAAC,CAClD,SAAU,YACZ,EACA,CACE,MAAO,gCACP,YAAa,wDACb,KAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;iDAsB8B,CAAC,CACtC,SAAU,YACZ,EACD,AACH,EACA,CACE,MAAO,kCACP,QAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAqC6B,CAAC,CACxC,OAAQ,CAAY,CAAC,EAAE,CAAC,GAAG,CAC3B,UAAW,CAAY,CAAC,EAAE,CAAC,SAAS,CACpC,MAAO,EACP,SAAU,CACR,CACE,MAAO,+BACP,YAAa,oCACb,KAAM,CAAC;;;;;;;;;;;;;qDAakC,CAAC,CAC1C,SAAU,YACZ,EACA,CACE,MAAO,+BACP,YAAa,+CACb,KAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;2DAuBwC,CAAC,CAChD,SAAU,YACZ,EACD,AACH,EACA,CACE,MAAO,sBACP,QAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA0CqB,CAAC,CAChC,OAAQ,CAAY,CAAC,EAAE,CAAC,GAAG,CAC3B,UAAW,CAAY,CAAC,EAAE,CAAC,SAAS,CACpC,MAAO,EACP,SAAU,CACR,CACE,MAAO,uCACP,YAAa,gEACb,KAAM,CAAC;;;;;;;;;;;;;;;;;4DAiByC,CAAC,CACjD,SAAU,YACZ,EACD,AACH,EACA,CACE,MAAO,2BACP,QAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA2CqB,CAAC,CAChC,OAAQ,CAAY,CAAC,EAAE,CAAC,GAAG,CAC3B,UAAW,CAAY,CAAC,EAAE,CAAC,SAAS,CACpC,MAAO,EACP,SAAU,CACR,CACE,MAAO,oCACP,YAAa,wEACb,KAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA+D8B,CAAC,CACtC,SAAU,YACZ,EACD,AACH,EACD,CAEK,EAAuB,EAAE,CAC/B,IAAK,IAAM,KAAa,EAAQ,CAC9B,IAAM,EAAS,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,SAAS,CAAC,CACzE,GAAG,CAAS,CACZ,UAAW,IAAI,KACf,UAAW,IAAI,IACjB,GACA,EAAc,IAAI,CAAC,CAAE,GAAG,CAAS,CAAE,IAAK,EAAO,UAAU,AAAC,GAG1D,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,SAAS,CACxD,CAAE,IAAK,EAAU,MAAM,AAAC,EACxB,CAAE,MAAO,CAAE,OAAQ,EAAO,UAAU,AAAC,CAAE,EAE3C,CAGA,IAAM,EAAO,CACX,MAAO,0BACP,OAAQ,CAAY,CAAC,EAAE,CAAC,GAAG,CAC3B,UAAW,CAAY,CAAC,EAAE,CAAC,SAAS,CACpC,UAAW,GACX,UAAW,CACT,CACE,SAAU,4EACV,QAAS,CAAC,OAAQ,OAAQ,WAAY,QAAQ,CAC9C,cAAe,EACf,YAAa,4FACf,EACA,CACE,SAAU,4DACV,QAAS,CACP,qDACA,6CACA,8CACA,oDACD,CACD,cAAe,EACf,YAAa,iJACf,EACD,CACD,UAAW,IAAI,KACf,UAAW,IAAI,IACjB,EAIA,OAFA,MAAM,EAAA,OAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,SAAS,CAAC,GAEtD,EAAA,YAAY,CAAC,IAAI,CAAC,CACvB,QAAS,gCACT,QAAS,CACP,SAAU,EAAgB,MAAM,CAChC,MAAO,EAAa,MAAM,CAC1B,OAAQ,EAAc,MAAM,CAC5B,QAAS,CACX,CACF,EAEF,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,0BAA2B,GAClC,EAAA,YAAY,CAAC,IAAI,CACtB,CAAE,QAAS,yBAA0B,MAAO,EAAM,OAAO,AAAC,EAC1D,CAAE,OAAQ,GAAI,EAElB,CACF,2BD1iBA,IAAA,EAAA,EAAA,CAAA,CAAA,OAIA,IAAM,EAAc,IAAI,EAAA,mBAAmB,CAAC,CACxC,WAAY,CACR,KAAM,EAAA,SAAS,CAAC,SAAS,CACzB,KAAM,kBACN,SAAU,YACV,SAAU,QACV,WAAY,EAChB,EACA,QAAS,CAAA,OACT,IADiD,eACc,CAA3C,EACpB,iBAAkB,sCAClB,iBAZqB,GAarB,SAAA,CACJ,GAIM,kBAAE,CAAgB,sBAAE,CAAoB,aAAE,CAAW,CAAE,CAAG,EAChE,SAAS,IACL,MAAO,CAAA,EAAA,EAAA,UAAA,AAAW,EAAC,kBACf,uBACA,CACJ,EACJ,CAEO,eAAe,EAAQ,CAAG,CAAE,CAAG,CAAE,CAAG,EACnC,EAAY,KAAK,EAAE,AACnB,CAAA,EAAA,EAAA,cAAA,AAAc,EAAC,EAAK,+BAAgC,QAAQ,MAAM,CAAC,MAAM,IAE7E,IAAI,EAAU,kBAKV,EAAU,EAAQ,OAAO,CAAC,WAAY,KAAO,IAMjD,IAAM,EAAgB,MAAM,EAAY,OAAO,CAAC,EAAK,EAAK,SACtD,EACA,mBAHE,CAAA,CAIN,GACA,GAAI,CAAC,EAID,OAHA,EAAI,IADY,MACF,CAAG,IACjB,EAAI,GAAG,CAAC,eACS,MAAjB,CAAwB,CAApB,IAAyB,KAAhB,EAAoB,EAAI,SAAS,CAAC,IAAI,CAAC,EAAK,QAAQ,OAAO,IACjE,KAEX,GAAM,SAAE,CAAO,QAAE,CAAM,YAAE,CAAU,WAAE,CAAS,aAAE,CAAW,mBAAE,CAAiB,qBAAE,CAAmB,sBAAE,CAAoB,yBAAE,CAAuB,kBAAE,CAAgB,yBAAE,CAAuB,uBAAE,CAAqB,CAAE,CAAG,EACnN,EAAoB,CAAA,EAAA,EAAA,gBAAA,AAAgB,EAAC,GACvC,GAAQ,EAAQ,EAAkB,aAAa,CAAC,EAAkB,EAAI,EAAkB,MAAM,CAAC,EAAA,AAAiB,EAC9G,EAAY,WAEa,MAAvB,EAA8B,KAAK,EAAI,EAAoB,SAAA,AAAS,EACpE,AADsE,MAChE,EAAoB,SAAS,CAAC,EAAK,EAAK,GAAW,GAEzD,EAAI,GAAG,CAAC,gCAEL,MAEX,GAAI,GAAS,CAAC,EAAa,CACvB,IAAM,GAAgB,CAAQ,EAAkB,MAAM,CAAC,EAAiB,CAClE,EAAgB,EAAkB,aAAa,CAAC,EAAkB,CACxE,GAAI,GACI,CAA2B,MAAb,KADH,GACW,EAAc,CAAC,EAAe,CACpD,GAAI,EAAW,YAAY,CAAC,WAAW,CACnC,CADqC,MAC9B,MAAM,GAEjB,OAAM,IAAI,EAAA,eAAe,AAC7B,CAER,CACA,IAAI,EAAW,MACX,GAAU,EAAY,IAAb,CAAkB,EAAK,EAAD,EAG/B,EAAW,AAAa,OAHqB,KAC7C,EAAW,CAAA,EAEwB,IAAM,CAAA,EAE7C,IAAM,GACgB,IAAtB,EAAY,EAAkB,GAAb,EAEjB,CAAC,EAKK,EAAqB,GAAS,CAAC,EAIjC,GAAyB,GACzB,CAAA,EAAA,EAAA,iBADkD,aAClD,AAA8B,EAAC,CAC3B,KAAM,IAbqF,sBAc3F,wBACA,EACA,gBAAiB,CAAA,EAAA,EAAA,qBAAA,AAAqB,EAAC,CACnC,uBACJ,EACJ,GAEJ,IAAM,EAAS,EAAI,MAAM,EAAI,MACvB,EAAS,CAAA,EAAA,EAAA,SAAA,AAAS,IAClB,EAAa,EAAO,kBAAkB,GACtC,EAAU,QACZ,oBACA,EACA,WAAY,CACR,aAAc,CACV,gBAAgB,CAAQ,EAAW,YAAY,CAAC,cAAc,AAClE,EACA,iBAAiB,CAAQ,EAAW,eAAe,yBACnD,EACA,iBAAkB,CAAA,EAAA,EAAA,cAAc,AAAd,EAAe,EAAK,oBACtC,kBAAmB,EAAW,SAAS,CACvC,UAAW,EAAI,SAAS,CACxB,QAAS,AAAC,IACN,EAAI,EAAE,CAAC,QAAS,EACpB,EACA,sBAAkB,EAClB,8BAA+B,CAAC,EAAO,EAAU,IAAe,EAAY,cAAc,CAAC,EAAK,EAAO,EAAc,EACzH,EACA,cAAe,SACX,CACJ,CACJ,EACM,EAAc,IAAI,EAAA,eAAe,CAAC,GAClC,EAAc,IAAI,EAAA,gBAAgB,CAAC,GACnC,EAAU,EAAA,kBAAkB,CAAC,mBAAmB,CAAC,EAAa,CAAA,EAAA,EAAA,sBAAA,AAAsB,EAAC,IAC3F,GAAI,CACA,IAAM,EAAoB,MAAO,GACtB,EAAY,MAAM,CAAC,EAAS,GAAS,OAAO,CAAC,KAChD,GAAI,CAAC,EAAM,OACX,EAAK,aAAa,CAAC,CACf,mBAAoB,EAAI,UAAU,CAClC,YAAY,CAChB,GACA,IAAM,EAAqB,EAAO,qBAAqB,GAEvD,GAAI,CAAC,EACD,OAEJ,GAAI,EAAmB,GAAG,CAAC,EAHF,kBAGwB,EAAA,cAAc,CAAC,aAAa,CAAE,YAC3E,QAAQ,IAAI,CAAC,CAAC,2BAA2B,EAAE,EAAmB,GAAG,CAAC,kBAAkB,qEAAqE,CAAC,EAG9J,IAAM,EAAQ,EAAmB,GAAG,CAAC,cACrC,GAAI,EAAO,CACP,IAAM,EAAO,CAAA,EAAG,EAAO,CAAC,EAAE,EAAA,CAAO,CACjC,EAAK,aAAa,CAAC,CACf,aAAc,EACd,aAAc,EACd,iBAAkB,CACtB,GACA,EAAK,UAAU,CAAC,EACpB,MACI,CADG,CACE,UAAU,CAAC,CAAA,EAAG,EAAO,CAAC,EAAE,EAAA,CAAS,CAE9C,GAEE,GAAgB,CAAoC,CAAA,EAAA,EAAA,EAA5B,YAA4B,AAAc,EAAC,EAAK,eACxE,EAAiB,MAAO,QACtB,EA2FI,EA1FR,IAAM,EAAoB,MAAO,oBAAE,CAAkB,CAAE,IACnD,GAAI,CACA,GAAI,CAAC,GAAiB,GAAwB,GAA2B,CAAC,EAKtE,OAJA,EAAI,SADsF,CAC5E,CAAG,IAEjB,EAAI,SAAS,CAAC,iBAAkB,eAChC,EAAI,GAAG,CAAC,gCACD,KAEX,IAAM,EAAW,MAAM,EAAkB,EACzC,GAAI,YAAY,CAAG,EAAQ,UAAU,CAAC,YAAY,CAClD,IAAI,EAAmB,EAAQ,UAAU,CAAC,gBAAgB,CAGtD,GACI,EAAI,SAAS,EAAE,CACf,CAFc,CAEV,SAAS,CAAC,GACd,OAAmB,GAG3B,IAAM,EAAY,EAAQ,UAAU,CAAC,aAAa,CAGlD,IAAI,EA6BA,OADA,MAAM,CAAA,EAAA,EAAA,YAAA,AAAY,EAAC,EAAa,EAAa,EAAU,EAAQ,UAAU,CAAC,gBAAgB,EACnF,IA7BA,EACP,IAAM,EAAO,MAAM,EAAS,IAAI,GAE1B,EAAU,CAAA,EAAA,EAAA,yBAAA,AAAyB,EAAC,EAAS,OAAO,CACtD,IACA,EAAO,CAAC,EAAA,EADG,oBACmB,CAAC,CAAG,CAAA,EAElC,CAAC,CAAO,CAAC,eAAe,EAAI,EAAK,IAAI,EAAE,CACvC,CAAO,CAAC,eAAe,CAAG,EAAK,IAAA,AAAI,EAEvC,IAAM,EAAa,KAAkD,IAA3C,EAAQ,UAAU,CAAC,mBAAmB,IAAoB,EAAQ,UAAU,CAAC,mBAAmB,EAAI,EAAA,cAAc,AAAd,GAAyB,AAAR,EAAgB,UAAU,CAAC,mBAAmB,CACvL,EAAS,KAA8C,IAAvC,EAAQ,UAAU,CAAC,eAAe,EAAoB,EAAQ,UAAU,CAAC,eAAe,EAAI,EAAA,cAAc,MAAG,EAAY,EAAQ,UAAU,CAAC,eAAe,CAcjL,MAZmB,CAYZ,AAXH,MAAO,CACH,KAAM,EAAA,eAAe,CAAC,SAAS,CAC/B,OAAQ,EAAS,MAAM,CACvB,KAAM,OAAO,IAAI,CAAC,MAAM,EAAK,WAAW,YACxC,CACJ,EACA,aAAc,CACV,oBACA,CACJ,CACJ,CAEJ,CAKJ,CAAE,KALS,CAKF,EAAK,CAcV,KAXI,CAAsB,QAAO,KAAK,EAAI,EAAmB,OAAA,AAAO,EAAE,CAClE,MAAM,EAAY,cAAc,CAAC,EAAK,EAAK,CACvC,WAAY,aACZ,UAAW,EACX,UAAW,QACX,iBAAkB,CAAA,EAAA,EAAA,mBAAA,AAAmB,EAAC,oBAClC,uBACA,CACJ,EACJ,EAAG,GAED,CACV,CACJ,EACM,EAAa,MAAM,EAAY,cAAc,CAAC,KAChD,aACA,WACA,EACA,UAAW,EAAA,SAAS,CAAC,SAAS,CAC9B,YAAY,EACZ,oBACA,mBAAmB,uBACnB,0BACA,oBACA,EACA,UAAW,EAAI,SAAS,eACxB,CACJ,GAEA,GAAI,CAAC,EACD,KADQ,EACD,KAEX,GAAI,CAAe,MAAd,CAAqB,EAAS,AAA0C,GAA9C,GAAK,GAAoB,EAAW,KAAA,AAAK,EAAY,KAAK,EAAI,EAAkB,IAAI,IAAM,EAAA,eAAe,CAAC,SAAS,CAE9I,CAFgJ,KAE1I,OAAO,cAAc,CAAC,AAAI,MAAM,CAAC,kDAAkD,EAAgB,MAAd,CAAqB,EAAS,AAA2C,GAA/C,IAAK,EAAqB,EAAW,KAAA,AAAK,EAAY,KAAK,EAAI,EAAmB,IAAI,CAAA,CAAE,EAAG,oBAAqB,CACjO,MAAO,OACP,YAAY,EACZ,cAAc,CAClB,EAEA,CAAC,GACD,EAAI,SAAS,CADG,AACF,iBAAkB,EAAuB,cAAgB,EAAW,MAAM,CAAG,OAAS,EAAW,OAAO,CAAG,QAAU,OAGnI,GACA,EAAI,QADS,CACA,CAAC,gBAAiB,2DAEnC,IAAM,EAAU,CAAA,EAAA,EAAA,2BAAA,AAA2B,EAAC,EAAW,KAAK,CAAC,OAAO,EAcpE,OAbI,AAAE,CAAD,EAAkB,GACnB,EADwB,AAChB,GADmB,GACb,CAAC,EAAA,sBAAsB,GAIrC,EAAW,YAAY,EAAK,EAAD,AAAK,SAAS,CAAC,kBAAqB,EAAD,AAAS,GAAG,CAAC,kBAAkB,AAC7F,EAAQ,GAAG,CAAC,gBAAiB,CAAA,EAAA,EAAA,qBAAA,AAAqB,EAAC,EAAW,YAAY,GAE9E,MAAM,CAAA,EAAA,EAAA,YAAA,AAAY,EAAC,EAAa,EAChC,IAAI,SAAS,EAAW,KAAK,CAAC,IAAI,CAAE,SAChC,EACA,OAAQ,EAAW,KAAK,CAAC,MAAM,EAAI,GACvC,IACO,IACX,EAGI,EACA,MAAM,EAAe,EADT,CAGZ,MAAM,EAAO,qBAAqB,CAAC,EAAI,OAAO,CAAE,IAAI,EAAO,KAAK,CAAC,EAAA,cAAc,CAAC,aAAa,CAAE,CACvF,SAAU,CAAA,EAAG,EAAO,CAAC,EAAE,EAAA,CAAS,CAChC,KAAM,EAAA,QAAQ,CAAC,MAAM,CACrB,WAAY,CACR,cAAe,EACf,cAAe,EAAI,GAAG,AAC1B,CACJ,EAAG,GAEf,CAAE,MAAO,EAAK,CAcV,GAbI,AAAE,CAAD,YAAgB,EAAA,eAAe,EAChC,CADmC,KAC7B,EAAY,cAAc,CAAC,EAAK,EAAK,CACvC,WAAY,aACZ,UAAW,EACX,UAAW,QACX,iBAAkB,CAAA,EAAA,EAAA,mBAAmB,AAAnB,EAAoB,oBAClC,uBACA,CACJ,EACJ,GAIA,EAAO,MAAM,EAKjB,OAHA,MAAM,CAAA,EAAA,EAAA,YAAA,AAAY,EAAC,EAAa,EAAa,IAAI,SAAS,KAAM,CAC5D,OAAQ,GACZ,IACO,IACX,CACJ,EAEA,qCAAqC","ignoreList":[0]}