{"version":3,"sources":["turbopack:///[project]/src/app/api/seed/route.ts","turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport dbConnect from '@/lib/db'\nimport mongoose from 'mongoose'\n\nexport async function POST() {\n  try {\n    await dbConnect()\n\n    // Clear existing data\n    await mongoose.connection.db.collection('subjects').deleteMany({})\n    await mongoose.connection.db.collection('units').deleteMany({})\n    await mongoose.connection.db.collection('topics').deleteMany({})\n    await mongoose.connection.db.collection('quizzes').deleteMany({})\n\n    // Complete subjects data\n    const subjects = [\n      {\n        title: 'Data Structures & Algorithms',\n        description: 'Master fundamental data structures and algorithmic thinking with comprehensive examples and practice problems.',\n        image: 'https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=400',\n        category: 'core',\n        units: []\n      },\n      {\n        title: 'Database Management System',\n        description: 'Learn database design, SQL queries, normalization, and database management concepts.',\n        image: 'https://images.unsplash.com/photo-1544383835-bda2bc66a55d?w=400',\n        category: 'core',\n        units: []\n      },\n      {\n        title: 'Operating Systems',\n        description: 'Understand OS concepts, processes, memory management, and system calls.',\n        image: 'https://images.unsplash.com/photo-1518432031352-d6fc5c10da5a?w=400',\n        category: 'core',\n        units: []\n      },\n      {\n        title: 'Computer Networks',\n        description: 'Explore networking protocols, OSI model, TCP/IP, and network security.',\n        image: 'https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=400',\n        category: 'core',\n        units: []\n      },\n      {\n        title: 'Web Development',\n        description: 'Build modern web applications with HTML, CSS, JavaScript, and popular frameworks.',\n        image: 'https://images.unsplash.com/photo-1547658719-da2b51169166?w=400',\n        category: 'frontend',\n        units: []\n      },\n      {\n        title: 'AI & Machine Learning',\n        description: 'Introduction to artificial intelligence, machine learning algorithms, and neural networks.',\n        image: 'https://images.unsplash.com/photo-1555255707-c07966088b7b?w=400',\n        category: 'ai-ml',\n        units: []\n      }\n    ]\n\n    // Insert subjects\n    const insertedSubjects = await mongoose.connection.db.collection('subjects').insertMany(subjects)\n    const subjectIds = Object.values(insertedSubjects.insertedIds)\n\n    // Comprehensive units data for all subjects\n    const units = [\n      // Data Structures & Algorithms Units\n      {\n        title: 'Arrays and Strings',\n        description: 'Fundamental linear data structures for storing and manipulating data',\n        subjectId: subjectIds[0],\n        topics: [],\n        order: 1\n      },\n      {\n        title: 'Linked Lists',\n        description: 'Dynamic data structures with pointer-based connections',\n        subjectId: subjectIds[0],\n        topics: [],\n        order: 2\n      },\n      {\n        title: 'Stacks and Queues',\n        description: 'LIFO and FIFO data structures with specific access patterns',\n        subjectId: subjectIds[0],\n        topics: [],\n        order: 3\n      },\n      {\n        title: 'Trees and Binary Trees',\n        description: 'Hierarchical data structures for efficient searching and sorting',\n        subjectId: subjectIds[0],\n        topics: [],\n        order: 4\n      },\n      {\n        title: 'Graphs',\n        description: 'Network structures representing relationships between entities',\n        subjectId: subjectIds[0],\n        topics: [],\n        order: 5\n      },\n      {\n        title: 'Dynamic Programming',\n        description: 'Optimization technique for solving complex problems efficiently',\n        subjectId: subjectIds[0],\n        topics: [],\n        order: 6\n      },\n      \n      // Database Management System Units\n      {\n        title: 'Introduction to DBMS',\n        description: 'Database concepts, architecture, and data models',\n        subjectId: subjectIds[1],\n        topics: [],\n        order: 1\n      },\n      {\n        title: 'Entity-Relationship Model',\n        description: 'Conceptual database design using ER diagrams',\n        subjectId: subjectIds[1],\n        topics: [],\n        order: 2\n      },\n      {\n        title: 'Relational Model',\n        description: 'Mathematical foundation of relational databases',\n        subjectId: subjectIds[1],\n        topics: [],\n        order: 3\n      },\n      {\n        title: 'SQL Fundamentals',\n        description: 'Structured Query Language for database operations',\n        subjectId: subjectIds[1],\n        topics: [],\n        order: 4\n      },\n      {\n        title: 'Normalization',\n        description: 'Database design principles to eliminate redundancy',\n        subjectId: subjectIds[1],\n        topics: [],\n        order: 5\n      },\n      {\n        title: 'Transaction Management',\n        description: 'ACID properties and concurrency control',\n        subjectId: subjectIds[1],\n        topics: [],\n        order: 6\n      },\n      \n      // Operating Systems Units\n      {\n        title: 'OS Introduction',\n        description: 'Operating system concepts and system architecture',\n        subjectId: subjectIds[2],\n        topics: [],\n        order: 1\n      },\n      {\n        title: 'Process Management',\n        description: 'Process creation, scheduling, and synchronization',\n        subjectId: subjectIds[2],\n        topics: [],\n        order: 2\n      },\n      {\n        title: 'Memory Management',\n        description: 'Virtual memory, paging, and memory allocation',\n        subjectId: subjectIds[2],\n        topics: [],\n        order: 3\n      },\n      {\n        title: 'File Systems',\n        description: 'File organization, directory structures, and storage',\n        subjectId: subjectIds[2],\n        topics: [],\n        order: 4\n      },\n      {\n        title: 'I/O Management',\n        description: 'Device drivers, interrupt handling, and I/O scheduling',\n        subjectId: subjectIds[2],\n        topics: [],\n        order: 5\n      },\n      {\n        title: 'Security and Protection',\n        description: 'Access control, authentication, and system security',\n        subjectId: subjectIds[2],\n        topics: [],\n        order: 6\n      }\n    ]\n\n    // Insert units\n    const insertedUnits = await mongoose.connection.db.collection('units').insertMany(units)\n    const unitIds = Object.values(insertedUnits.insertedIds)\n\n    // Add units for remaining subjects\n    const additionalUnits = [\n      // Computer Networks Units\n      {\n        title: 'Network Fundamentals',\n        description: 'Basic networking concepts and network types',\n        subjectId: subjectIds[3],\n        topics: [],\n        order: 1\n      },\n      {\n        title: 'OSI and TCP/IP Models',\n        description: 'Network protocol stack and layer architecture',\n        subjectId: subjectIds[3],\n        topics: [],\n        order: 2\n      },\n      {\n        title: 'Data Link Layer',\n        description: 'Frame transmission, error detection, and MAC protocols',\n        subjectId: subjectIds[3],\n        topics: [],\n        order: 3\n      },\n      \n      // Web Development Units\n      {\n        title: 'HTML & CSS Fundamentals',\n        description: 'Structure and styling of web pages',\n        subjectId: subjectIds[4],\n        topics: [],\n        order: 1\n      },\n      {\n        title: 'JavaScript Basics',\n        description: 'Client-side scripting and DOM manipulation',\n        subjectId: subjectIds[4],\n        topics: [],\n        order: 2\n      },\n      {\n        title: 'Frontend Frameworks',\n        description: 'React, Vue, and modern frontend development',\n        subjectId: subjectIds[4],\n        topics: [],\n        order: 3\n      },\n      \n      // AI & Machine Learning Units\n      {\n        title: 'AI Introduction',\n        description: 'Artificial intelligence concepts and applications',\n        subjectId: subjectIds[5],\n        topics: [],\n        order: 1\n      },\n      {\n        title: 'Machine Learning Basics',\n        description: 'Supervised, unsupervised, and reinforcement learning',\n        subjectId: subjectIds[5],\n        topics: [],\n        order: 2\n      },\n      {\n        title: 'Neural Networks',\n        description: 'Deep learning and artificial neural networks',\n        subjectId: subjectIds[5],\n        topics: [],\n        order: 3\n      }\n    ]\n\n    // Insert additional units\n    const additionalInsertedUnits = await mongoose.connection.db.collection('units').insertMany(additionalUnits)\n    const additionalUnitIds = Object.values(additionalInsertedUnits.insertedIds)\n    \n    // Combine all unit IDs\n    const allUnitIds = [...unitIds, ...additionalUnitIds]\n\n    // Update subjects with unit references\n    await mongoose.connection.db.collection('subjects').updateOne(\n      { _id: subjectIds[0] },\n      { $set: { units: [unitIds[0], unitIds[1], unitIds[2], unitIds[3], unitIds[4], unitIds[5]] } }\n    )\n    await mongoose.connection.db.collection('subjects').updateOne(\n      { _id: subjectIds[1] },\n      { $set: { units: [unitIds[6], unitIds[7], unitIds[8], unitIds[9], unitIds[10], unitIds[11]] } }\n    )\n    await mongoose.connection.db.collection('subjects').updateOne(\n      { _id: subjectIds[2] },\n      { $set: { units: [unitIds[12], unitIds[13], unitIds[14], unitIds[15], unitIds[16], unitIds[17]] } }\n    )\n    await mongoose.connection.db.collection('subjects').updateOne(\n      { _id: subjectIds[3] },\n      { $set: { units: [additionalUnitIds[0], additionalUnitIds[1], additionalUnitIds[2]] } }\n    )\n    await mongoose.connection.db.collection('subjects').updateOne(\n      { _id: subjectIds[4] },\n      { $set: { units: [additionalUnitIds[3], additionalUnitIds[4], additionalUnitIds[5]] } }\n    )\n    await mongoose.connection.db.collection('subjects').updateOne(\n      { _id: subjectIds[5] },\n      { $set: { units: [additionalUnitIds[6], additionalUnitIds[7], additionalUnitIds[8]] } }\n    )\n\n    // Comprehensive topics for multiple units\n    const topics = [\n      // DSA Topics\n      {\n        title: 'Array Fundamentals',\n        content: `<h1>Array Fundamentals</h1>\n        <p>Arrays are fundamental data structures that store elements of the same type in contiguous memory locations.</p>\n        <h2>Key Characteristics</h2>\n        <ul>\n          <li><strong>Contiguous Memory Layout</strong>: Elements are stored in consecutive memory addresses</li>\n          <li><strong>Fixed Size</strong>: Size is determined at declaration time</li>\n          <li><strong>Homogeneous Elements</strong>: All elements must be of the same data type</li>\n          <li><strong>Zero-based Indexing</strong>: First element is at index 0</li>\n        </ul>\n        <h2>Time Complexity</h2>\n        <ul>\n          <li><strong>Access</strong>: O(1) - Direct access using index</li>\n          <li><strong>Search</strong>: O(n) - Linear search through elements</li>\n          <li><strong>Insertion</strong>: O(n) - May require shifting elements</li>\n          <li><strong>Deletion</strong>: O(n) - May require shifting elements</li>\n        </ul>`,\n        examples: [\n          {\n            title: 'Array Declaration and Initialization',\n            description: 'Different ways to declare and initialize arrays',\n            code: `// JavaScript\nlet numbers = [1, 2, 3, 4, 5];\nlet fruits = new Array(\"apple\", \"banana\", \"orange\");\n\n// Java\nint[] numbers = {1, 2, 3, 4, 5};\nString[] fruits = new String[3];\n\n// Python\nnumbers = [1, 2, 3, 4, 5]\nfruits = [\"apple\", \"banana\", \"orange\"]`,\n            language: 'javascript'\n          }\n        ],\n        unitId: unitIds[0],\n        subjectId: subjectIds[0],\n        order: 1\n      },\n      {\n        title: 'Array Operations and Algorithms',\n        content: `<h1>Array Operations and Algorithms</h1>\n        <p>Learn essential array operations including traversal, searching, insertion, and deletion.</p>\n        <h2>Common Operations</h2>\n        <ul>\n          <li><strong>Traversal</strong>: Visiting each element exactly once</li>\n          <li><strong>Insertion</strong>: Adding elements at specific positions</li>\n          <li><strong>Deletion</strong>: Removing elements from specific positions</li>\n          <li><strong>Searching</strong>: Finding elements or their positions</li>\n        </ul>`,\n        examples: [\n          {\n            title: 'Linear Search Implementation',\n            description: 'Basic search algorithm for arrays',\n            code: `function linearSearch(arr, target) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === target) {\n            return i; // Return index if found\n        }\n    }\n    return -1; // Return -1 if not found\n}\n\n// Example usage\nlet numbers = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(linearSearch(numbers, 22)); // Output: 4`,\n            language: 'javascript'\n          }\n        ],\n        unitId: unitIds[0],\n        subjectId: subjectIds[0],\n        order: 2\n      },\n      \n      // Linked List Topics\n      {\n        title: 'Linked List Fundamentals',\n        content: `<h1>Linked List Fundamentals</h1>\n        <p>A linked list is a linear data structure where elements are stored in nodes, and each node contains data and a reference to the next node.</p>\n        <h2>Advantages</h2>\n        <ul>\n          <li><strong>Dynamic Size</strong>: Can grow or shrink during runtime</li>\n          <li><strong>Efficient Insertion/Deletion</strong>: O(1) at known positions</li>\n          <li><strong>Memory Efficient</strong>: Allocates memory as needed</li>\n        </ul>`,\n        examples: [\n          {\n            title: 'Singly Linked List Implementation',\n            description: 'Basic linked list structure and operations',\n            code: `class ListNode {\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this.head = null;\n        this.size = 0;\n    }\n    \n    insertAtBeginning(data) {\n        const newNode = new ListNode(data);\n        newNode.next = this.head;\n        this.head = newNode;\n        this.size++;\n    }\n}`,\n            language: 'javascript'\n          }\n        ],\n        unitId: unitIds[1],\n        subjectId: subjectIds[0],\n        order: 1\n      },\n      \n      // DBMS Topics\n      {\n        title: 'Database Concepts and Architecture',\n        content: `<h1>Database Concepts and Architecture</h1>\n        <p>A database is an organized collection of structured information, or data, typically stored electronically in a computer system.</p>\n        <h2>Key Database Concepts</h2>\n        <ul>\n          <li><strong>Data</strong>: Raw facts and figures</li>\n          <li><strong>Database</strong>: Collection of related data</li>\n          <li><strong>DBMS</strong>: Software system that enables users to define, create, maintain, and control access to databases</li>\n        </ul>\n        <h2>Three-Level Architecture</h2>\n        <ul>\n          <li><strong>External Level</strong>: User view of the database</li>\n          <li><strong>Conceptual Level</strong>: Community view of the database</li>\n          <li><strong>Internal Level</strong>: Physical storage of data</li>\n        </ul>`,\n        examples: [\n          {\n            title: 'Basic SQL Query',\n            description: 'Simple SELECT statement',\n            code: `-- Select all columns from users table\nSELECT * FROM users;\n\n-- Select specific columns with condition\nSELECT name, email FROM users WHERE age > 18;\n\n-- Select with ordering\nSELECT * FROM users ORDER BY name ASC;`,\n            language: 'sql'\n          }\n        ],\n        unitId: unitIds[6],\n        subjectId: subjectIds[1],\n        order: 1\n      },\n      \n      // OS Topics\n      {\n        title: 'Operating System Fundamentals',\n        content: `<h1>Operating System Fundamentals</h1>\n        <p>An Operating System (OS) is system software that manages computer hardware and software resources and provides common services for computer programs.</p>\n        <h2>Functions of Operating System</h2>\n        <ul>\n          <li><strong>Process Management</strong>: Process creation, scheduling, and synchronization</li>\n          <li><strong>Memory Management</strong>: Memory allocation and virtual memory</li>\n          <li><strong>File System Management</strong>: File operations and storage</li>\n          <li><strong>I/O System Management</strong>: Device driver management</li>\n        </ul>`,\n        examples: [\n          {\n            title: 'System Call Example',\n            description: 'Basic system calls in C',\n            code: `#include <stdio.h>\n#include <unistd.h>\n#include <sys/wait.h>\n\nint main() {\n    pid_t pid = fork();\n    \n    if (pid == 0) {\n        // Child process\n        printf(\"Child process: PID = %d\\\\n\", getpid());\n        exit(0);\n    } else if (pid > 0) {\n        // Parent process\n        printf(\"Parent process: PID = %d\\\\n\", getpid());\n        wait(NULL);\n    }\n    \n    return 0;\n}`,\n            language: 'c'\n          }\n        ],\n        unitId: unitIds[12],\n        subjectId: subjectIds[2],\n        order: 1\n      }\n    ]\n\n    // Insert topics\n    const insertedTopics = await mongoose.connection.db.collection('topics').insertMany(topics)\n    const topicIds = Object.values(insertedTopics.insertedIds)\n\n    // Update units with topic references\n    await mongoose.connection.db.collection('units').updateOne(\n      { _id: unitIds[0] },\n      { $set: { topics: [topicIds[0], topicIds[1]] } }\n    )\n    await mongoose.connection.db.collection('units').updateOne(\n      { _id: unitIds[1] },\n      { $set: { topics: [topicIds[2]] } }\n    )\n    await mongoose.connection.db.collection('units').updateOne(\n      { _id: unitIds[6] },\n      { $set: { topics: [topicIds[3]] } }\n    )\n    await mongoose.connection.db.collection('units').updateOne(\n      { _id: unitIds[12] },\n      { $set: { topics: [topicIds[4]] } }\n    )\n\n    // Multiple quizzes for different units\n    const quizzes = [\n      {\n        title: 'Arrays and Strings Quiz',\n        unitId: unitIds[0],\n        subjectId: subjectIds[0],\n        questions: [\n          {\n            question: 'What is the time complexity of accessing an element in an array by index?',\n            options: ['O(1)', 'O(n)', 'O(log n)', 'O(n²)'],\n            correctAnswer: 0,\n            explanation: 'Array elements can be accessed directly using their index, which takes constant time O(1).'\n          },\n          {\n            question: 'Which of the following is NOT a characteristic of arrays?',\n            options: [\n              'Elements are stored in contiguous memory locations',\n              'All elements must be of the same data type',\n              'Dynamic size that can change during runtime',\n              'Zero-based indexing in most programming languages'\n            ],\n            correctAnswer: 2,\n            explanation: 'Arrays typically have a fixed size that is determined at creation time.'\n          },\n          {\n            question: 'What is the worst-case time complexity for searching an element in an unsorted array?',\n            options: ['O(1)', 'O(log n)', 'O(n)', 'O(n log n)'],\n            correctAnswer: 2,\n            explanation: 'In the worst case, we might need to check every element in the array, resulting in O(n) time complexity.'\n          }\n        ],\n        timeLimit: 20\n      },\n      {\n        title: 'Linked Lists Quiz',\n        unitId: unitIds[1],\n        subjectId: subjectIds[0],\n        questions: [\n          {\n            question: 'What is the main advantage of linked lists over arrays?',\n            options: ['Faster access time', 'Dynamic size', 'Better cache performance', 'Less memory usage'],\n            correctAnswer: 1,\n            explanation: 'Linked lists can grow or shrink during runtime, unlike arrays which have fixed size.'\n          },\n          {\n            question: 'What is the time complexity of inserting an element at the beginning of a linked list?',\n            options: ['O(1)', 'O(n)', 'O(log n)', 'O(n²)'],\n            correctAnswer: 0,\n            explanation: 'Inserting at the beginning only requires updating the head pointer, which is O(1).'\n          }\n        ],\n        timeLimit: 15\n      },\n      {\n        title: 'Database Fundamentals Quiz',\n        unitId: unitIds[6],\n        subjectId: subjectIds[1],\n        questions: [\n          {\n            question: 'What does DBMS stand for?',\n            options: ['Database Management System', 'Data Base Management Software', 'Database Manipulation System', 'Data Management System'],\n            correctAnswer: 0,\n            explanation: 'DBMS stands for Database Management System.'\n          },\n          {\n            question: 'Which level of database architecture describes how data is physically stored?',\n            options: ['External Level', 'Conceptual Level', 'Internal Level', 'Logical Level'],\n            correctAnswer: 2,\n            explanation: 'The Internal Level describes the physical storage of data.'\n          }\n        ],\n        timeLimit: 15\n      }\n    ]\n\n    await mongoose.connection.db.collection('quizzes').insertMany(quizzes)\n\n    // Get final counts\n    const finalCounts = {\n      subjects: await mongoose.connection.db.collection('subjects').countDocuments(),\n      units: await mongoose.connection.db.collection('units').countDocuments(),\n      topics: await mongoose.connection.db.collection('topics').countDocuments(),\n      quizzes: await mongoose.connection.db.collection('quizzes').countDocuments()\n    }\n\n    return NextResponse.json({\n      message: 'Database seeded successfully!',\n      counts: finalCounts,\n      subjectIds: subjectIds.map(id => id.toString()),\n      unitIds: unitIds.map(id => id.toString())\n    })\n\n  } catch (error) {\n    console.error('Seeding error:', error)\n    return NextResponse.json(\n      { message: 'Seeding failed', error: error.message },\n      { status: 500 }\n    )\n  }\n}","import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { addRequestMeta, getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { setReferenceManifestsSingleton } from \"next/dist/esm/server/app-render/encryption-utils\";\nimport { createServerModuleMap } from \"next/dist/esm/server/app-render/action-utils\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/seed/route\",\n        pathname: \"/api/seed\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/src/app/api/seed/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    if (routeModule.isDev) {\n        addRequestMeta(req, 'devRequestTimingInternalsEnd', process.hrtime.bigint());\n    }\n    let srcPage = \"/api/seed/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, parsedUrl, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname, clientReferenceManifest, serverActionsManifest } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    const render404 = async ()=>{\n        // TODO: should route-module itself handle rendering the 404\n        if (routerServerContext == null ? void 0 : routerServerContext.render404) {\n            await routerServerContext.render404(req, res, parsedUrl, false);\n        } else {\n            res.end('This page could not be found');\n        }\n        return null;\n    };\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                if (nextConfig.experimental.adapterPath) {\n                    return await render404();\n                }\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isStaticGeneration = isIsr && !supportsDynamicResponse;\n    // Before rendering (which initializes component tree modules), we have to\n    // set the reference manifests to our global store so Server Action's\n    // encryption util can access to them at the top level of the page module.\n    if (serverActionsManifest && clientReferenceManifest) {\n        setReferenceManifestsSingleton({\n            page: srcPage,\n            clientReferenceManifest,\n            serverActionsManifest,\n            serverModuleMap: createServerModuleMap({\n                serverActionsManifest\n            })\n        });\n    }\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            cacheComponents: Boolean(nextConfig.cacheComponents),\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: nextConfig.cacheLife,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${srcPage}`);\n                }\n            });\n        };\n        const isMinimalMode = Boolean(process.env.MINIMAL_MODE || getRequestMeta(req, 'minimalMode'));\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!isMinimalMode && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isStaticGeneration,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil,\n                isMinimalMode\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!isMinimalMode) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(isMinimalMode && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, // @ts-expect-error - Argument of type 'Buffer<ArrayBufferLike>' is not assignable to parameter of type 'BodyInit | null | undefined'.\n            new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${srcPage}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isStaticGeneration,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n"],"names":[],"mappings":"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","ignoreList":[1]}