{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/aayu/Desktop/online%20LSM/cse-learning-platform/src/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI!;\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function dbConnect() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n      return mongoose;\n    });\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    cached.promise = null;\n    throw e;\n  }\n\n  return cached.conn;\n}\n\nexport default dbConnect;"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,yDAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,yDAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,oHAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///Users/aayu/Desktop/online%20LSM/cse-learning-platform/src/app/api/test/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport dbConnect from '@/lib/db'\nimport mongoose from 'mongoose'\n\nexport async function GET() {\n  try {\n    await dbConnect()\n    \n    // Get all collections\n    const collections = await mongoose.connection.db.listCollections().toArray()\n    const collectionNames = collections.map(c => c.name)\n    \n    // Count documents in each collection\n    const counts = {}\n    for (const name of collectionNames) {\n      try {\n        counts[name] = await mongoose.connection.db.collection(name).countDocuments()\n      } catch (error) {\n        counts[name] = 'Error counting'\n      }\n    }\n    \n    return NextResponse.json({\n      message: 'Database connection successful',\n      collections: collectionNames,\n      documentCounts: counts\n    })\n  } catch (error) {\n    console.error('Database test error:', error)\n    return NextResponse.json(\n      { message: 'Database connection failed', error: error.message },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,IAAA,6HAAS;QAEf,sBAAsB;QACtB,MAAM,cAAc,MAAM,oHAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,eAAe,GAAG,OAAO;QAC1E,MAAM,kBAAkB,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI;QAEnD,qCAAqC;QACrC,MAAM,SAAS,CAAC;QAChB,KAAK,MAAM,QAAQ,gBAAiB;YAClC,IAAI;gBACF,MAAM,CAAC,KAAK,GAAG,MAAM,oHAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,cAAc;YAC7E,EAAE,OAAO,OAAO;gBACd,MAAM,CAAC,KAAK,GAAG;YACjB;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,aAAa;YACb,gBAAgB;QAClB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA8B,OAAO,MAAM,OAAO;QAAC,GAC9D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}